name: apidoc

# build the documentation whenever there are new commits on main
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version value'
  workflow_call:
    inputs:
      version:
        description: 'Version value'
        type: string

# security: restrict permissions for CI jobs.
permissions:
  contents: write
  pages: write

jobs:
  # Build the documentation and upload the static HTML files as an artifact.
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - run: pip install pydoctor==22.9.1
      - name: build dev build
        if: inputs.version == ''
        run: |
          pydoctor --make-html --html-output=pydocs/dev --project-name="idnumbers" --project-version=dev --project-url=https://github.com/identique/idnumbers --template-dir=./docs/template idnumbers
          echo "window._CURRENT_VERSION = 'dev';" > pydocs/dev/current_version.js
      - name: build prod build
        if: inputs.version != ''
        run: |
          pydoctor --make-html --html-output=pydocs/v${{ inputs.version }} --project-name="idnumbers" --project-version=${{ inputs.version }} --project-url=https://github.com/identique/idnumbers --template-dir=./docs/template idnumbers
          echo "window._CURRENT_VERSION = '${{ inputs.version }}';" > pydocs/dev/current_version.js
      - run: cp docs/template/versions.js pydocs/
      - uses: actions/upload-artifact@v3
        with:
          name: apidoc
          path: pydocs
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: gh-pages
      - uses: actions/download-artifact@v3
        with:
          name: apidoc
          path: pydocs
      - run: git config --local user.email "microdataxyz@outlook.com"
      - run: git config --local user.name "Microdata Bot"
      - name: deploy dev apidoc
        if: inputs.version == ''
        run: |
          ls pydocs
          cp -rf pydocs/* ./docs
          git add ./docs
          git diff-index --quiet HEAD || git commit -m "Update dev doc"
      - name: deploy prod apidoc
        if: inputs.version != ''
        run: |
          ls pydocs
          cp -rf pydocs ./docs/v${{ inputs.version }}
          cp pydocs/versions.json ./docs/versions.json
          git add ./docs
          git diff-index --quiet HEAD || git commit -m "Add release doc v${{ inputs.version }}"
      - run: git push origin gh-pages
